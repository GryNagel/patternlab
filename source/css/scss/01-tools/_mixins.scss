/*------------------------------------*\
    #MIXINS
\*------------------------------------*/

/**
 * Add padding to container
 */
@mixin padded-box( $sides-only: false,
                   $custom: false,
                   $padding-top: 0,
                   $padding-bottom: 0)
{
  @if ($sides-only) {
    padding: 0 $padded-box-pad-mobile;
    @include media($medium-screen-up) { padding: 0 $padded-box-pad; }
  } @else if ($custom) {
    padding: $padding-top $padded-box-pad-mobile $padding-bottom;
    @include media($medium-screen-up) { padding: $padding-top $padded-box-pad $padding-bottom; }
  } @else {
    padding: $padded-box-pad-mobile;
    @include media($medium-screen-up) { padding: $padded-box-pad; }
  }
}

/**
 * Resets right/left padding created by %padded-box, allowing elements within a
 * padded-box-container to utilize its full width.
 */
@mixin padded-box-reset($size: "medium-up") {
  @if $size == "mobile" {
    margin-left: -$padded-box-pad-mobile;
    margin-right: -$padded-box-pad-mobile;
    padding-left: $padded-box-pad-mobile;
    padding-right: $padded-box-pad-mobile;
  } @else if $size == "mobile-nopad" {
    margin-left: -$padded-box-pad-mobile;
    margin-right: -$padded-box-pad-mobile;
    padding-left: 0;
    padding-right: 0;
  } @else if $size == "medium-up" {
    margin-left: -$padded-box-pad;
    margin-right: -$padded-box-pad;
    padding-left: $padded-box-pad;
    padding-right: $padded-box-pad;
  } @else if $size == "medium-up-nopad" {
    margin-left: -$padded-box-pad;
    margin-right: -$padded-box-pad;
    padding-left: 0;
    padding-right: 0;
  }
}

@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

// Sizing stuff
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

// Positioning stuff
@mixin position($position, $args) {
  @each $o in top right bottom left {
    $i: index($args, $o);

    @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number  {
      #{$o}: nth($args, $i + 1);
    }
  }

  position: $position;
}

// Absolutely positioning stuff
@mixin absolute($args) {
  @include position(absolute, $args);
}

@mixin triangle($direction, $position, $color: currentcolor, $size: 10px) {
  $direction: if(function-exists("to-lower-case") == true, to-lower-case($direction), $direction);

  @if not index(top right bottom left, $direction) {
    @warn "Direction must be one of `top`, `right`, `bottom` or `left`; currently `#{$direction}`.";
  }

  @include absolute($position);
  @include size(0);
  content: '';
  z-index: 2;

  border-#{opposite-direction($direction)}: $size solid $color;
  $perpendicular-border: $size solid transparent;

  @if $direction == top or $direction == bottom {
    border-left:   $perpendicular-border;
    border-right:  $perpendicular-border;
  }

  @else if $direction == right or $direction == left {
    border-bottom: $perpendicular-border;
    border-top:    $perpendicular-border;
  }
}

// Reset default list style
@mixin list-reset {
  list-style: none;
  padding: 0;
  margin: 0;
}

/**
 * Word-wrap mixin that breaks words that overflow width
 * Adds manual hyphening (not supported by Blink).
 */
@mixin word-wrap() {
  // - These are technically the same, but use both
  overflow-wrap: break-word;
  word-wrap: break-word;
  // - Adds a hyphen where the line break is suggested, if supported (not in Blink, as of Feb. 2016)
  hyphens: manual;
}

// Common styles for icons used as before/after pseudo-elements
@mixin pseudo-icon($extend,
                   $position: 'before',
                   $display: inline-block,
                   $margin: 0,
                   $opacity: 1)
{
  @if not index('before' 'after', $position) {
    @warn "Position must be specified as either a 'before' or 'after'-element";
    @error "See above warning for stacktrace";
  }

  &::#{$position} {
    @extend #{$extend};
    content: '';
    display: $display;
    @if ( $margin != 0  ) { margin: $margin; }
    @if ( $opacity < 1 ) { opacity: $opacity; }
  }
}

// For placeholder text in input fields
@mixin placeholder( $color,
                    $font-family: inherit,
                    $font-size: inherit,
                    $font-weight: inherit,
                    $font-style: normal,
                    $font-smoothing: true)
{
  $prefix-list: '::-webkit-input-placeholder', ':-moz-placeholder', '::-moz-placeholder', ':-ms-input-placeholder';

  @each $prefix in $prefix-list {
    &#{$prefix} {
      color: $color;
      font-family: $font-family;
      font-size: $font-size;
      font-weight: $font-weight;
      font-style: $font-style;
      @if ($font-smoothing) { @include font-smoothing; }
    }
  }

}

@mixin slanted-decor($primary-color, $secondary-color, $postion: bottom) {
  position: relative;
  overflow: hidden;

  &:after,
  &:before {
    content: "";
    position: absolute;
    top: 100%;
    display: block;
    @if ($postion == bottom) {
      width: 200%;
      height: 100%;
    }
    @if ($postion == right) {
      width: 100%;
      height: 200%;
    }
  }

  // Primary (color on top)
  &:before {
    z-index: 2;
    background: $primary-color;
    @if ($postion == bottom) {
      left: 0;
      transform-origin: top left;
      transform: rotate(356deg);
    }
    @if ($postion == right) {
      bottom: 0;
      left: 100%;
      transform-origin: bottom left;
      transform: translateY(-100%) rotate(-370deg);
    }
  }

  // Secondary (color underneath primary)
  &:after {
    z-index: 1;
    background: $secondary-color;
    @if ($postion == bottom) {
      top: 100%;
      left: auto;
      right: 0;
      transform-origin: top right;
      transform: rotate(-356deg);
    }
    @if ($postion == right) {
      top: 0;
      left: 100%;
      transform: rotate(367deg);
    }
  }
}

// Common styles for icons used as before/after pseudo-elements
@mixin pseudo-icon($extend,
                   $position: 'before',
                   $display: inline-block,
                   $margin: 0,
                   $opacity: 1)
{
  @if not index('before' 'after', $position) {
    @warn "Position must be specified as either a 'before' or 'after'-element";
    @error "See above warning for stacktrace";
  }

  &::#{$position} {
    @extend #{$extend} !optional;
    content: '';
    display: $display;
    @if ( $margin != 0  ) { margin: $margin; }
    @if ( $opacity < 1 ) { opacity: $opacity; }
  }
}

// Container that centers content and restricts width to specified max-widths
@mixin content-container($x-large:true) {
  margin: 0 auto;
  max-width: $max-width-inner;
  @if ($x-large) {
    @include media($x-large-screen-up) { max-width: $max-width-inner-xlarge; }
  }
}

/**
 * Maintains specified aspect ratio based on width/height relationship
 * Src: https://css-tricks.com/snippets/sass/maintain-aspect-ratio-mixin/
 */
@mixin aspect-ratio($width, $height, $content-class: ".content") {
  position: relative;

  img { width: 100%; }

  iframe {
    width: 100%;
    height: 100%;
  }

  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
    background-color: $color-img-placeholder; //Fjernes?

    .editmode & {
      background-color: $color-img-placeholder;
    }
  }

  #{$content-class} {
    overflow: hidden;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;

    div { height: 100%; }
  }
}